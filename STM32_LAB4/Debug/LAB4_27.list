
LAB4_27.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038fc  080038fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003904  08003904  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800390c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003918  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003918  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf8a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a50  00000000  00000000  0002cfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001680a  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3a9  00000000  00000000  000468ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea16  00000000  00000000  00053c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e26a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003130  00000000  00000000  000e26fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080038cc 	.word	0x080038cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080038cc 	.word	0x080038cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fdff 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f92d 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fb77 	bl	8000bdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 fb4b 	bl	8000b88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004f2:	f000 fa85 	bl	8000a00 <MX_TIM3_Init>
  MX_TIM5_Init();
 80004f6:	f000 faf9 	bl	8000aec <MX_TIM5_Init>
  MX_TIM1_Init();
 80004fa:	f000 f98d 	bl	8000818 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004fe:	f000 fa2b 	bl	8000958 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000502:	2104      	movs	r1, #4
 8000504:	487d      	ldr	r0, [pc, #500]	; (80006fc <main+0x220>)
 8000506:	f002 f801 	bl	800250c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim5);
 800050a:	487d      	ldr	r0, [pc, #500]	; (8000700 <main+0x224>)
 800050c:	f001 fdf4 	bl	80020f8 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim1);
 8000510:	487c      	ldr	r0, [pc, #496]	; (8000704 <main+0x228>)
 8000512:	f001 fdf1 	bl	80020f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000516:	2100      	movs	r1, #0
 8000518:	487a      	ldr	r0, [pc, #488]	; (8000704 <main+0x228>)
 800051a:	f001 fea1 	bl	8002260 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 800051e:	487a      	ldr	r0, [pc, #488]	; (8000708 <main+0x22c>)
 8000520:	f001 fdea 	bl	80020f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4878      	ldr	r0, [pc, #480]	; (8000708 <main+0x22c>)
 8000528:	f001 fe9a 	bl	8002260 <HAL_TIM_PWM_Start>

  PID.Kp = 2;
 800052c:	4b77      	ldr	r3, [pc, #476]	; (800070c <main+0x230>)
 800052e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000532:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.0001;
 8000534:	4b75      	ldr	r3, [pc, #468]	; (800070c <main+0x230>)
 8000536:	4a76      	ldr	r2, [pc, #472]	; (8000710 <main+0x234>)
 8000538:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 800053a:	4b74      	ldr	r3, [pc, #464]	; (800070c <main+0x230>)
 800053c:	4a75      	ldr	r2, [pc, #468]	; (8000714 <main+0x238>)
 800053e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000540:	2100      	movs	r1, #0
 8000542:	4872      	ldr	r0, [pc, #456]	; (800070c <main+0x230>)
 8000544:	f000 fd97 	bl	8001076 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	static uint32_t timestep = 0;
	if (timestep < HAL_GetTick())
 8000548:	f000 fe32 	bl	80011b0 <HAL_GetTick>
 800054c:	4602      	mov	r2, r0
 800054e:	4b72      	ldr	r3, [pc, #456]	; (8000718 <main+0x23c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d9f8      	bls.n	8000548 <main+0x6c>
	{
		timestep = HAL_GetTick() + 10;
 8000556:	f000 fe2b 	bl	80011b0 <HAL_GetTick>
 800055a:	4603      	mov	r3, r0
 800055c:	330a      	adds	r3, #10
 800055e:	4a6e      	ldr	r2, [pc, #440]	; (8000718 <main+0x23c>)
 8000560:	6013      	str	r3, [r2, #0]

		counterPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <main+0x220>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000568:	ee07 3a90 	vmov	s15, r3
 800056c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <main+0x240>)
 8000572:	edc3 7a00 	vstr	s15, [r3]
		position = (counterPosition*36000)/307200;
 8000576:	4b69      	ldr	r3, [pc, #420]	; (800071c <main+0x240>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000720 <main+0x244>
 8000580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000584:	eddf 6a67 	vldr	s13, [pc, #412]	; 8000724 <main+0x248>
 8000588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800058c:	4b66      	ldr	r3, [pc, #408]	; (8000728 <main+0x24c>)
 800058e:	edc3 7a00 	vstr	s15, [r3]

		Vfeedback = arm_pid_f32(&PID, setposition - position);
 8000592:	4b66      	ldr	r3, [pc, #408]	; (800072c <main+0x250>)
 8000594:	ed93 7a00 	vldr	s14, [r3]
 8000598:	4b63      	ldr	r3, [pc, #396]	; (8000728 <main+0x24c>)
 800059a:	edd3 7a00 	vldr	s15, [r3]
 800059e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005a2:	4b5a      	ldr	r3, [pc, #360]	; (800070c <main+0x230>)
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	ed93 7a00 	vldr	s14, [r3]
 80005b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80005c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80005c8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80005d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80005e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ea:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68da      	ldr	r2, [r3, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a4a      	ldr	r2, [pc, #296]	; (8000730 <main+0x254>)
 8000606:	6013      	str	r3, [r2, #0]

		e = setposition - position;
 8000608:	4b48      	ldr	r3, [pc, #288]	; (800072c <main+0x250>)
 800060a:	ed93 7a00 	vldr	s14, [r3]
 800060e:	4b46      	ldr	r3, [pc, #280]	; (8000728 <main+0x24c>)
 8000610:	edd3 7a00 	vldr	s15, [r3]
 8000614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000618:	4b46      	ldr	r3, [pc, #280]	; (8000734 <main+0x258>)
 800061a:	edc3 7a00 	vstr	s15, [r3]
		if(Vfeedback > 100)
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <main+0x254>)
 8000620:	edd3 7a00 	vldr	s15, [r3]
 8000624:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000738 <main+0x25c>
 8000628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000630:	dd02      	ble.n	8000638 <main+0x15c>
		{
			Vfeedback = 100;
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <main+0x254>)
 8000634:	4a41      	ldr	r2, [pc, #260]	; (800073c <main+0x260>)
 8000636:	601a      	str	r2, [r3, #0]
		}
		if(Vfeedback < -100)
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <main+0x254>)
 800063a:	edd3 7a00 	vldr	s15, [r3]
 800063e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000740 <main+0x264>
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d502      	bpl.n	8000652 <main+0x176>
		{
			Vfeedback = 100;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <main+0x254>)
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <main+0x260>)
 8000650:	601a      	str	r2, [r3, #0]
		}
		if(!(e < 1 && e >-1))
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <main+0x258>)
 8000654:	edd3 7a00 	vldr	s15, [r3]
 8000658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800065c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	bf4c      	ite	mi
 8000666:	2301      	movmi	r3, #1
 8000668:	2300      	movpl	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d112      	bne.n	800069c <main+0x1c0>
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <main+0x258>)
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	bfcc      	ite	gt
 800068a:	2301      	movgt	r3, #1
 800068c:	2300      	movle	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f083 0301 	eor.w	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	f43f af56 	beq.w	8000548 <main+0x6c>
		{
			if(e > 0)
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x258>)
 800069e:	edd3 7a00 	vldr	s15, [r3]
 80006a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	dd0e      	ble.n	80006ca <main+0x1ee>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Vfeedback);
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <main+0x254>)
 80006ae:	edd3 7a00 	vldr	s15, [r3]
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <main+0x228>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ba:	ee17 2a90 	vmov	r2, s15
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <main+0x228>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c8:	e73e      	b.n	8000548 <main+0x6c>
			}
			else if(e < 0)
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <main+0x258>)
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	d50f      	bpl.n	80006fa <main+0x21e>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <main+0x228>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -Vfeedback);
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <main+0x254>)
 80006e4:	edd3 7a00 	vldr	s15, [r3]
 80006e8:	eef1 7a67 	vneg.f32	s15, s15
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <main+0x228>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f4:	ee17 2a90 	vmov	r2, s15
 80006f8:	63da      	str	r2, [r3, #60]	; 0x3c
  {
 80006fa:	e725      	b.n	8000548 <main+0x6c>
 80006fc:	20000070 	.word	0x20000070
 8000700:	20000100 	.word	0x20000100
 8000704:	20000028 	.word	0x20000028
 8000708:	200000b8 	.word	0x200000b8
 800070c:	2000018c 	.word	0x2000018c
 8000710:	38d1b717 	.word	0x38d1b717
 8000714:	3dcccccd 	.word	0x3dcccccd
 8000718:	200001c4 	.word	0x200001c4
 800071c:	200001c0 	.word	0x200001c0
 8000720:	470ca000 	.word	0x470ca000
 8000724:	48960000 	.word	0x48960000
 8000728:	200001b0 	.word	0x200001b0
 800072c:	200001b4 	.word	0x200001b4
 8000730:	200001b8 	.word	0x200001b8
 8000734:	200001bc 	.word	0x200001bc
 8000738:	42c80000 	.word	0x42c80000
 800073c:	42c80000 	.word	0x42c80000
 8000740:	c2c80000 	.word	0xc2c80000

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f8b2 	bl	80038bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 ffac 	bl	8001728 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d6:	f000 fa6f 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fa0e 	bl	8001c18 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000802:	f000 fa59 	bl	8000cb8 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	; 0x58
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 f833 	bl	80038bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_TIM1_Init+0x138>)
 8000858:	4a3e      	ldr	r2, [pc, #248]	; (8000954 <MX_TIM1_Init+0x13c>)
 800085a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800085c:	4b3c      	ldr	r3, [pc, #240]	; (8000950 <MX_TIM1_Init+0x138>)
 800085e:	2253      	movs	r2, #83	; 0x53
 8000860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_TIM1_Init+0x138>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <MX_TIM1_Init+0x138>)
 800086a:	2264      	movs	r2, #100	; 0x64
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_TIM1_Init+0x138>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <MX_TIM1_Init+0x138>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <MX_TIM1_Init+0x138>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4833      	ldr	r0, [pc, #204]	; (8000950 <MX_TIM1_Init+0x138>)
 8000882:	f001 fbe9 	bl	8002058 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800088c:	f000 fa14 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089a:	4619      	mov	r1, r3
 800089c:	482c      	ldr	r0, [pc, #176]	; (8000950 <MX_TIM1_Init+0x138>)
 800089e:	f002 f88d 	bl	80029bc <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008a8:	f000 fa06 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ac:	4828      	ldr	r0, [pc, #160]	; (8000950 <MX_TIM1_Init+0x138>)
 80008ae:	f001 fc7d 	bl	80021ac <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008b8:	f000 f9fe 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008c8:	4619      	mov	r1, r3
 80008ca:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_TIM1_Init+0x138>)
 80008cc:	f002 fc3c 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008d6:	f000 f9ef 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	2360      	movs	r3, #96	; 0x60
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 80008de:	2332      	movs	r3, #50	; 0x32
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_TIM1_Init+0x138>)
 8000900:	f001 ff9a 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800090a:	f000 f9d5 	bl	8000cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM1_Init+0x138>)
 8000932:	f002 fc77 	bl	8003224 <HAL_TIMEx_ConfigBreakDeadTime>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800093c:	f000 f9bc 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM1_Init+0x138>)
 8000942:	f000 fa81 	bl	8000e48 <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	; 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028
 8000954:	40010000 	.word	0x40010000

08000958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2224      	movs	r2, #36	; 0x24
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f002 ffa8 	bl	80038bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_TIM2_Init+0xa0>)
 8000976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM2_Init+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_TIM2_Init+0xa0>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = QEI_Period-1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_TIM2_Init+0xa0>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_TIM2_Init+0xa4>)
 800098c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM2_Init+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_TIM2_Init+0xa0>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800099a:	2303      	movs	r3, #3
 800099c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b2:	2301      	movs	r3, #1
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM2_Init+0xa0>)
 80009c6:	f001 fcfb 	bl	80023c0 <HAL_TIM_Encoder_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009d0:	f000 f972 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM2_Init+0xa0>)
 80009e2:	f002 fbb1 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009ec:	f000 f964 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000070 	.word	0x20000070
 80009fc:	0004afff 	.word	0x0004afff

08000a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	f107 0320 	add.w	r3, r7, #32
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	615a      	str	r2, [r3, #20]
 8000a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a32:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <MX_TIM3_Init+0xe8>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a38:	2253      	movs	r2, #83	; 0x53
 8000a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a54:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a56:	f001 faff 	bl	8002058 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000a60:	f000 f92a 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a72:	f001 ffa3 	bl	80029bc <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000a7c:	f000 f91c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a80:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000a82:	f001 fb93 	bl	80021ac <HAL_TIM_PWM_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a8c:	f000 f914 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000aa0:	f002 fb52 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000aaa:	f000 f905 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	2360      	movs	r3, #96	; 0x60
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000ac6:	f001 feb7 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ad0:	f000 f8f2 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM3_Init+0xe4>)
 8000ad6:	f000 f9b7 	bl	8000e48 <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3738      	adds	r7, #56	; 0x38
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000b8 	.word	0x200000b8
 8000ae8:	40000400 	.word	0x40000400

08000aec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MX_TIM5_Init+0x98>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b30:	f001 fa92 	bl	8002058 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f8bd 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b4c:	f001 ff36 	bl	80029bc <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 f8af 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM5_Init+0x94>)
 8000b68:	f002 faee 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000b72:	f000 f8a1 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000100 	.word	0x20000100
 8000b84:	40000c00 	.word	0x40000c00

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART2_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f002 fb96 	bl	80032f0 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f875 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000148 	.word	0x20000148
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c68:	f000 fd44 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_GPIO_Init+0xd8>)
 8000c84:	f000 fbb2 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000ca0:	f000 fba4 	bl	80013ec <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d02:	2007      	movs	r0, #7
 8000d04:	f000 fb30 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_TIM_Base_MspInit+0x98>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10e      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d42:	e02e      	b.n	8000da2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10e      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
}
 8000d6a:	e01a      	b.n	8000da2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_TIM_Base_MspInit+0xa4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2032      	movs	r0, #50	; 0x32
 8000d98:	f000 faf1 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fb0a 	bl	80013b6 <HAL_NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40000400 	.word	0x40000400
 8000db8:	40000c00 	.word	0x40000c00

08000dbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d12b      	bne.n	8000e36 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e16:	2303      	movs	r3, #3
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e26:	2301      	movs	r3, #1
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8000e32:	f000 fadb 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <HAL_TIM_MspPostInit+0xb0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d11f      	bne.n	8000eaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_TIM_MspPostInit+0xb8>)
 8000ea4:	f000 faa2 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ea8:	e022      	b.n	8000ef0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <HAL_TIM_MspPostInit+0xbc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d11d      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_MspPostInit+0xb4>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_TIM_MspPostInit+0xb8>)
 8000eec:	f000 fa7e 	bl	80013ec <HAL_GPIO_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40000400 	.word	0x40000400

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f62:	230c      	movs	r3, #12
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f7e:	f000 fa35 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f8d0 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM5_IRQHandler+0x10>)
 8000ff2:	f001 fb19 	bl	8002628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000100 	.word	0x20000100

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f002 fc0f 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fa41 	bl	80004dc <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001068:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 800106c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001070:	200001cc 	.word	0x200001cc

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	ed93 7a06 	vldr	s14, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a07 	vldr	s15, [r3, #28]
 800108c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edd3 7a08 	vldr	s15, [r3, #32]
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80010a6:	eeb1 7a67 	vneg.f32	s14, s15
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80010b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1a      	ldr	r2, [r3, #32]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	330c      	adds	r3, #12
 80010d0:	220c      	movs	r2, #12
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fbf1 	bl	80038bc <memset>
  }

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_Init+0x40>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_Init+0x40>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_Init+0x40>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f92b 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fdd4 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f943 	bl	80013d2 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f90b 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	200001c8 	.word	0x200001c8

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200001c8 	.word	0x200001c8

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff3e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff31 	bl	800122c <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e159      	b.n	80016bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8148 	bne.w	80016b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	2b02      	cmp	r3, #2
 800143c:	d130      	bne.n	80014a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d017      	beq.n	80014dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a2 	beq.w	80016b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158e:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a49      	ldr	r2, [pc, #292]	; (80016dc <HAL_GPIO_Init+0x2f0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x202>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x1fe>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_GPIO_Init+0x2f8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <HAL_GPIO_Init+0x2fc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x1f6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a45      	ldr	r2, [pc, #276]	; (80016ec <HAL_GPIO_Init+0x300>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x1f2>
 80015da:	2304      	movs	r3, #4
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015de:	2307      	movs	r3, #7
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x204>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x304>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPIO_Init+0x304>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_GPIO_Init+0x304>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f aea2 	bls.w	8001408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40013c00 	.word	0x40013c00

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e267      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001746:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b85      	ldr	r3, [pc, #532]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800175a:	2b08      	cmp	r3, #8
 800175c:	d112      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b7e      	ldr	r3, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e242      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a75      	ldr	r2, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6f      	ldr	r2, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6c      	ldr	r2, [pc, #432]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b69      	ldr	r3, [pc, #420]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a68      	ldr	r2, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fce6 	bl	80011b0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fce2 	bl	80011b0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e207      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fcd2 	bl	80011b0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fcce 	bl	80011b0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1f3      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183e:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1c7      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_OscConfig+0x244>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fc87 	bl	80011b0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc83 	bl	80011b0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1a8      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4925      	ldr	r1, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_OscConfig+0x244>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc66 	bl	80011b0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc62 	bl	80011b0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e187      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d036      	beq.n	8001980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_RCC_OscConfig+0x248>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fc46 	bl	80011b0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc42 	bl	80011b0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e167      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x240>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
 8001946:	e01b      	b.n	8001980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x248>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fc2f 	bl	80011b0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	e00e      	b.n	8001974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fc2b 	bl	80011b0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d907      	bls.n	8001974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e150      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
 8001968:	40023800 	.word	0x40023800
 800196c:	42470000 	.word	0x42470000
 8001970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ea      	bne.n	8001956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8097 	beq.w	8001abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a7c      	ldr	r2, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a73      	ldr	r2, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fbeb 	bl	80011b0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fbe7 	bl	80011b0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e10c      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x474>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2ea>
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a63      	ldr	r2, [pc, #396]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	e01c      	b.n	8001a4c <HAL_RCC_OscConfig+0x324>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x30c>
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a5b      	ldr	r2, [pc, #364]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0x324>
 8001a34:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d015      	beq.n	8001a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff fbac 	bl	80011b0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fba8 	bl	80011b0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0cb      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ee      	beq.n	8001a5c <HAL_RCC_OscConfig+0x334>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fb96 	bl	80011b0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fb92 	bl	80011b0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0b5      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	4a38      	ldr	r2, [pc, #224]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a1 	beq.w	8001c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d05c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d141      	bne.n	8001b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb66 	bl	80011b0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fb62 	bl	80011b0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e087      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb3b 	bl	80011b0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fb37 	bl	80011b0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e05c      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x416>
 8001b5c:	e054      	b.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x478>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fb24 	bl	80011b0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fb20 	bl	80011b0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e045      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x470>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x444>
 8001b8a:	e03d      	b.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e038      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x4ec>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d028      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d121      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11a      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d111      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0cc      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d90c      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d044      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d119      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e067      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff fa52 	bl	80011b0 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff fa4e 	bl	80011b0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e04f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d20c      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9b2 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080038e4 	.word	0x080038e4
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b094      	sub	sp, #80	; 0x50
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
 8001df0:	2300      	movs	r3, #0
 8001df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df4:	2300      	movs	r3, #0
 8001df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	f200 80e1 	bhi.w	8001fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e16:	e0db      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e1c:	e0db      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_GetSysClockFreq+0x208>)
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e22:	e0d8      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	2200      	movs	r2, #0
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e56:	4622      	mov	r2, r4
 8001e58:	462b      	mov	r3, r5
 8001e5a:	f04f 0000 	mov.w	r0, #0
 8001e5e:	f04f 0100 	mov.w	r1, #0
 8001e62:	0159      	lsls	r1, r3, #5
 8001e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e68:	0150      	lsls	r0, r2, #5
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4621      	mov	r1, r4
 8001e70:	1a51      	subs	r1, r2, r1
 8001e72:	6139      	str	r1, [r7, #16]
 8001e74:	4629      	mov	r1, r5
 8001e76:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e88:	4659      	mov	r1, fp
 8001e8a:	018b      	lsls	r3, r1, #6
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e92:	4651      	mov	r1, sl
 8001e94:	018a      	lsls	r2, r1, #6
 8001e96:	4651      	mov	r1, sl
 8001e98:	ebb2 0801 	subs.w	r8, r2, r1
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb6:	4690      	mov	r8, r2
 8001eb8:	4699      	mov	r9, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	eb18 0303 	adds.w	r3, r8, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	eb49 0303 	adc.w	r3, r9, r3
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	024b      	lsls	r3, r1, #9
 8001eda:	4621      	mov	r1, r4
 8001edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	024a      	lsls	r2, r1, #9
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eea:	2200      	movs	r2, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef4:	f7fe f970 	bl	80001d8 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f00:	e058      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f12:	623b      	str	r3, [r7, #32]
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	464b      	mov	r3, r9
 8001f20:	f04f 0000 	mov.w	r0, #0
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	0159      	lsls	r1, r3, #5
 8001f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2e:	0150      	lsls	r0, r2, #5
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4641      	mov	r1, r8
 8001f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f54:	ebb2 040a 	subs.w	r4, r2, sl
 8001f58:	eb63 050b 	sbc.w	r5, r3, fp
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	00eb      	lsls	r3, r5, #3
 8001f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6a:	00e2      	lsls	r2, r4, #3
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	461d      	mov	r5, r3
 8001f70:	4643      	mov	r3, r8
 8001f72:	18e3      	adds	r3, r4, r3
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	464b      	mov	r3, r9
 8001f78:	eb45 0303 	adc.w	r3, r5, r3
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	028b      	lsls	r3, r1, #10
 8001f8e:	4621      	mov	r1, r4
 8001f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f94:	4621      	mov	r1, r4
 8001f96:	028a      	lsls	r2, r1, #10
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	61fa      	str	r2, [r7, #28]
 8001fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa8:	f7fe f916 	bl	80001d8 <__aeabi_uldivmod>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3750      	adds	r7, #80	; 0x50
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	007a1200 	.word	0x007a1200

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	080038f4 	.word	0x080038f4

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002034:	f7ff ffdc 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0b5b      	lsrs	r3, r3, #13
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	080038f4 	.word	0x080038f4

08002058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e041      	b.n	80020ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fe48 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f000 fd8a 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d001      	beq.n	8002110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e03c      	b.n	800218a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_TIM_Base_Start+0xa0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d018      	beq.n	8002154 <HAL_TIM_Base_Start+0x5c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d013      	beq.n	8002154 <HAL_TIM_Base_Start+0x5c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_TIM_Base_Start+0xa4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00e      	beq.n	8002154 <HAL_TIM_Base_Start+0x5c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_TIM_Base_Start+0xa8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_TIM_Base_Start+0x5c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_TIM_Base_Start+0xac>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_TIM_Base_Start+0x5c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <HAL_TIM_Base_Start+0xb0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b06      	cmp	r3, #6
 8002164:	d010      	beq.n	8002188 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002176:	e007      	b.n	8002188 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000
 800219c:	40000400 	.word	0x40000400
 80021a0:	40000800 	.word	0x40000800
 80021a4:	40000c00 	.word	0x40000c00
 80021a8:	40014000 	.word	0x40014000

080021ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e041      	b.n	8002242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f839 	bl	800224a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fce0 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_TIM_PWM_Start+0x24>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e022      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d109      	bne.n	800229e <HAL_TIM_PWM_Start+0x3e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e015      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x58>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e008      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e068      	b.n	80023a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_PWM_Start+0x82>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	e013      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x92>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	e00b      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_PWM_Start+0xa2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	e003      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fef2 	bl	80030fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_TIM_PWM_Start+0x14c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d107      	bne.n	8002332 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_TIM_PWM_Start+0x14c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d013      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_TIM_PWM_Start+0x150>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <HAL_TIM_PWM_Start+0x154>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_PWM_Start+0x158>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_TIM_PWM_Start+0x15c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d010      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e007      	b.n	80023a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40014000 	.word	0x40014000

080023c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e097      	b.n	8002504 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7fe fce7 	bl	8000dbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002404:	f023 0307 	bic.w	r3, r3, #7
 8002408:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f000 fbcb 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	4313      	orrs	r3, r2
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002460:	f023 030c 	bic.w	r3, r3, #12
 8002464:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	4313      	orrs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	011a      	lsls	r2, r3, #4
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	031b      	lsls	r3, r3, #12
 8002490:	4313      	orrs	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80024a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	4313      	orrs	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002524:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800252c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002534:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e069      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	e031      	b.n	80025c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d110      	bne.n	8002586 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e055      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002584:	e01d      	b.n	80025c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002598:	7b3b      	ldrb	r3, [r7, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e03e      	b.n	8002620 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_TIM_Encoder_Start+0xc4>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d008      	beq.n	80025e0 <HAL_TIM_Encoder_Start+0xd4>
 80025ce:	e00f      	b.n	80025f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fd8f 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 80025de:	e016      	b.n	800260e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	2104      	movs	r1, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fd87 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 80025ee:	e00e      	b.n	800260e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fd7f 	bl	80030fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	2104      	movs	r1, #4
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fd78 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 800260c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0202 	mvn.w	r2, #2
 8002654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa81 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fa73 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fa84 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0204 	mvn.w	r2, #4
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa57 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa49 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa5a 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0208 	mvn.w	r2, #8
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2204      	movs	r2, #4
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa2d 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa1f 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa30 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b10      	cmp	r3, #16
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b10      	cmp	r3, #16
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0210 	mvn.w	r2, #16
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2208      	movs	r2, #8
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa03 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f9f5 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fa06 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0201 	mvn.w	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9cf 	bl	8002b4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd82 	bl	80032dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f9cb 	bl	8002b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0220 	mvn.w	r2, #32
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fd4c 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002852:	2302      	movs	r3, #2
 8002854:	e0ae      	b.n	80029b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	f200 809f 	bhi.w	80029a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080029a5 	.word	0x080029a5
 8002874:	080029a5 	.word	0x080029a5
 8002878:	080029a5 	.word	0x080029a5
 800287c:	080028e1 	.word	0x080028e1
 8002880:	080029a5 	.word	0x080029a5
 8002884:	080029a5 	.word	0x080029a5
 8002888:	080029a5 	.word	0x080029a5
 800288c:	08002923 	.word	0x08002923
 8002890:	080029a5 	.word	0x080029a5
 8002894:	080029a5 	.word	0x080029a5
 8002898:	080029a5 	.word	0x080029a5
 800289c:	08002963 	.word	0x08002963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa02 	bl	8002cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6999      	ldr	r1, [r3, #24]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	619a      	str	r2, [r3, #24]
      break;
 80028de:	e064      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fa48 	bl	8002d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6999      	ldr	r1, [r3, #24]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	619a      	str	r2, [r3, #24]
      break;
 8002920:	e043      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fa93 	bl	8002e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0208 	orr.w	r2, r2, #8
 800293c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0204 	bic.w	r2, r2, #4
 800294c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69d9      	ldr	r1, [r3, #28]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	61da      	str	r2, [r3, #28]
      break;
 8002960:	e023      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fadd 	bl	8002f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69d9      	ldr	r1, [r3, #28]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	021a      	lsls	r2, r3, #8
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	61da      	str	r2, [r3, #28]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
      break;
 80029a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_ConfigClockSource+0x1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0b4      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x186>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d03e      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0xd4>
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	f200 8087 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	f000 8086 	beq.w	8002b2e <HAL_TIM_ConfigClockSource+0x172>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d87f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d01a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xa6>
 8002a2c:	2b70      	cmp	r3, #112	; 0x70
 8002a2e:	d87b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d050      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a34:	2b60      	cmp	r3, #96	; 0x60
 8002a36:	d877      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a3c:	2b50      	cmp	r3, #80	; 0x50
 8002a3e:	d873      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d058      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x13a>
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d86f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d064      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a4c:	2b30      	cmp	r3, #48	; 0x30
 8002a4e:	d86b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d060      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d867      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d05a      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	e062      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f000 fb23 	bl	80030bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	609a      	str	r2, [r3, #8]
      break;
 8002a8e:	e04f      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f000 fb0c 	bl	80030bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab2:	609a      	str	r2, [r3, #8]
      break;
 8002ab4:	e03c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 fa80 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2150      	movs	r1, #80	; 0x50
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fad9 	bl	8003086 <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e02c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 fa9f 	bl	8003026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2160      	movs	r1, #96	; 0x60
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fac9 	bl	8003086 <TIM_ITRx_SetConfig>
      break;
 8002af4:	e01c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fa60 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fab9 	bl	8003086 <TIM_ITRx_SetConfig>
      break;
 8002b14:	e00c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fab0 	bl	8003086 <TIM_ITRx_SetConfig>
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <TIM_Base_SetConfig+0xe4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00f      	beq.n	8002be8 <TIM_Base_SetConfig+0x38>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d00b      	beq.n	8002be8 <TIM_Base_SetConfig+0x38>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <TIM_Base_SetConfig+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <TIM_Base_SetConfig+0x38>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <TIM_Base_SetConfig+0xec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_Base_SetConfig+0x38>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <TIM_Base_SetConfig+0xf0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d108      	bne.n	8002bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <TIM_Base_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01b      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d017      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <TIM_Base_SetConfig+0xe8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <TIM_Base_SetConfig+0xec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <TIM_Base_SetConfig+0xf0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <TIM_Base_SetConfig+0xf4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <TIM_Base_SetConfig+0xf8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0x8a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <TIM_Base_SetConfig+0xfc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <TIM_Base_SetConfig+0xe4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d103      	bne.n	8002c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	615a      	str	r2, [r3, #20]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40000c00 	.word	0x40000c00
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40014400 	.word	0x40014400
 8002cac:	40014800 	.word	0x40014800

08002cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <TIM_OC1_SetConfig+0xc8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10c      	bne.n	8002d26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0308 	bic.w	r3, r3, #8
 8002d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <TIM_OC1_SetConfig+0xc8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	621a      	str	r2, [r3, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40010000 	.word	0x40010000

08002d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0210 	bic.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0320 	bic.w	r3, r3, #32
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <TIM_OC2_SetConfig+0xd4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10d      	bne.n	8002df8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <TIM_OC2_SetConfig+0xd4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000

08002e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <TIM_OC3_SetConfig+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10d      	bne.n	8002ece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <TIM_OC3_SetConfig+0xd0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d113      	bne.n	8002efe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	621a      	str	r2, [r3, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40010000 	.word	0x40010000

08002f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	031b      	lsls	r3, r3, #12
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <TIM_OC4_SetConfig+0x9c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d109      	bne.n	8002f9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000

08002fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 030a 	bic.w	r3, r3, #10
 8003004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003026:	b480      	push	{r7}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0210 	bic.w	r2, r3, #16
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f043 0307 	orr.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	021a      	lsls	r2, r3, #8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	431a      	orrs	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e050      	b.n	8003202 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d013      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40014000 	.word	0x40014000

08003224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800323c:	2302      	movs	r3, #2
 800323e:	e03d      	b.n	80032bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e03f      	b.n	8003382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd fdf6 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f829 	bl	800338c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b0c0      	sub	sp, #256	; 0x100
 8003392:	af00      	add	r7, sp, #0
 8003394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	68d9      	ldr	r1, [r3, #12]
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	ea40 0301 	orr.w	r3, r0, r1
 80033b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033e4:	f021 010c 	bic.w	r1, r1, #12
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033f2:	430b      	orrs	r3, r1
 80033f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	6999      	ldr	r1, [r3, #24]
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	ea40 0301 	orr.w	r3, r0, r1
 8003412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b8f      	ldr	r3, [pc, #572]	; (8003658 <UART_SetConfig+0x2cc>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d005      	beq.n	800342c <UART_SetConfig+0xa0>
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b8d      	ldr	r3, [pc, #564]	; (800365c <UART_SetConfig+0x2d0>)
 8003428:	429a      	cmp	r2, r3
 800342a:	d104      	bne.n	8003436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7fe fe00 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 8003430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003434:	e003      	b.n	800343e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003436:	f7fe fde7 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 800343a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003448:	f040 810c 	bne.w	8003664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800344c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800345a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	1891      	adds	r1, r2, r2
 8003464:	65b9      	str	r1, [r7, #88]	; 0x58
 8003466:	415b      	adcs	r3, r3
 8003468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800346e:	4621      	mov	r1, r4
 8003470:	eb12 0801 	adds.w	r8, r2, r1
 8003474:	4629      	mov	r1, r5
 8003476:	eb43 0901 	adc.w	r9, r3, r1
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348e:	4690      	mov	r8, r2
 8003490:	4699      	mov	r9, r3
 8003492:	4623      	mov	r3, r4
 8003494:	eb18 0303 	adds.w	r3, r8, r3
 8003498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800349c:	462b      	mov	r3, r5
 800349e:	eb49 0303 	adc.w	r3, r9, r3
 80034a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ba:	460b      	mov	r3, r1
 80034bc:	18db      	adds	r3, r3, r3
 80034be:	653b      	str	r3, [r7, #80]	; 0x50
 80034c0:	4613      	mov	r3, r2
 80034c2:	eb42 0303 	adc.w	r3, r2, r3
 80034c6:	657b      	str	r3, [r7, #84]	; 0x54
 80034c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034d0:	f7fc fe82 	bl	80001d8 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <UART_SetConfig+0x2d4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011c      	lsls	r4, r3, #4
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80034fc:	415b      	adcs	r3, r3
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003504:	4641      	mov	r1, r8
 8003506:	eb12 0a01 	adds.w	sl, r2, r1
 800350a:	4649      	mov	r1, r9
 800350c:	eb43 0b01 	adc.w	fp, r3, r1
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800351c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003524:	4692      	mov	sl, r2
 8003526:	469b      	mov	fp, r3
 8003528:	4643      	mov	r3, r8
 800352a:	eb1a 0303 	adds.w	r3, sl, r3
 800352e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003532:	464b      	mov	r3, r9
 8003534:	eb4b 0303 	adc.w	r3, fp, r3
 8003538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800354c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003550:	460b      	mov	r3, r1
 8003552:	18db      	adds	r3, r3, r3
 8003554:	643b      	str	r3, [r7, #64]	; 0x40
 8003556:	4613      	mov	r3, r2
 8003558:	eb42 0303 	adc.w	r3, r2, r3
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003566:	f7fc fe37 	bl	80001d8 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4611      	mov	r1, r2
 8003570:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2301 	umull	r2, r3, r3, r1
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2264      	movs	r2, #100	; 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	1acb      	subs	r3, r1, r3
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <UART_SetConfig+0x2d4>)
 8003588:	fba3 2302 	umull	r2, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003594:	441c      	add	r4, r3
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b0:	415b      	adcs	r3, r3
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6339      	str	r1, [r7, #48]	; 0x30
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800360c:	460b      	mov	r3, r1
 800360e:	18db      	adds	r3, r3, r3
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 8003612:	4613      	mov	r3, r2
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800361e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003622:	f7fc fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <UART_SetConfig+0x2d4>)
 800362c:	fba3 1302 	umull	r1, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3332      	adds	r3, #50	; 0x32
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <UART_SetConfig+0x2d4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4422      	add	r2, r4
 8003652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003654:	e105      	b.n	8003862 <UART_SetConfig+0x4d6>
 8003656:	bf00      	nop
 8003658:	40011000 	.word	0x40011000
 800365c:	40011400 	.word	0x40011400
 8003660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800366e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003676:	4642      	mov	r2, r8
 8003678:	464b      	mov	r3, r9
 800367a:	1891      	adds	r1, r2, r2
 800367c:	6239      	str	r1, [r7, #32]
 800367e:	415b      	adcs	r3, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003686:	4641      	mov	r1, r8
 8003688:	1854      	adds	r4, r2, r1
 800368a:	4649      	mov	r1, r9
 800368c:	eb43 0501 	adc.w	r5, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	00eb      	lsls	r3, r5, #3
 800369a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369e:	00e2      	lsls	r2, r4, #3
 80036a0:	4614      	mov	r4, r2
 80036a2:	461d      	mov	r5, r3
 80036a4:	4643      	mov	r3, r8
 80036a6:	18e3      	adds	r3, r4, r3
 80036a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036ac:	464b      	mov	r3, r9
 80036ae:	eb45 0303 	adc.w	r3, r5, r3
 80036b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036d2:	4629      	mov	r1, r5
 80036d4:	008b      	lsls	r3, r1, #2
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036dc:	4621      	mov	r1, r4
 80036de:	008a      	lsls	r2, r1, #2
 80036e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036e4:	f7fc fd78 	bl	80001d8 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4b60      	ldr	r3, [pc, #384]	; (8003870 <UART_SetConfig+0x4e4>)
 80036ee:	fba3 2302 	umull	r2, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	011c      	lsls	r4, r3, #4
 80036f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	1891      	adds	r1, r2, r2
 800370e:	61b9      	str	r1, [r7, #24]
 8003710:	415b      	adcs	r3, r3
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003718:	4641      	mov	r1, r8
 800371a:	1851      	adds	r1, r2, r1
 800371c:	6139      	str	r1, [r7, #16]
 800371e:	4649      	mov	r1, r9
 8003720:	414b      	adcs	r3, r1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003730:	4659      	mov	r1, fp
 8003732:	00cb      	lsls	r3, r1, #3
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373a:	4651      	mov	r1, sl
 800373c:	00ca      	lsls	r2, r1, #3
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	4603      	mov	r3, r0
 8003744:	4642      	mov	r2, r8
 8003746:	189b      	adds	r3, r3, r2
 8003748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800374c:	464b      	mov	r3, r9
 800374e:	460a      	mov	r2, r1
 8003750:	eb42 0303 	adc.w	r3, r2, r3
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	67bb      	str	r3, [r7, #120]	; 0x78
 8003762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003770:	4649      	mov	r1, r9
 8003772:	008b      	lsls	r3, r1, #2
 8003774:	4641      	mov	r1, r8
 8003776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800377a:	4641      	mov	r1, r8
 800377c:	008a      	lsls	r2, r1, #2
 800377e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003782:	f7fc fd29 	bl	80001d8 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <UART_SetConfig+0x4e4>)
 800378c:	fba3 1302 	umull	r1, r3, r3, r2
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	2164      	movs	r1, #100	; 0x64
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	3332      	adds	r3, #50	; 0x32
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <UART_SetConfig+0x4e4>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037aa:	441c      	add	r4, r3
 80037ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b0:	2200      	movs	r2, #0
 80037b2:	673b      	str	r3, [r7, #112]	; 0x70
 80037b4:	677a      	str	r2, [r7, #116]	; 0x74
 80037b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037ba:	4642      	mov	r2, r8
 80037bc:	464b      	mov	r3, r9
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	415b      	adcs	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ca:	4641      	mov	r1, r8
 80037cc:	1851      	adds	r1, r2, r1
 80037ce:	6039      	str	r1, [r7, #0]
 80037d0:	4649      	mov	r1, r9
 80037d2:	414b      	adcs	r3, r1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037e2:	4659      	mov	r1, fp
 80037e4:	00cb      	lsls	r3, r1, #3
 80037e6:	4651      	mov	r1, sl
 80037e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ec:	4651      	mov	r1, sl
 80037ee:	00ca      	lsls	r2, r1, #3
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	4642      	mov	r2, r8
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fc:	464b      	mov	r3, r9
 80037fe:	460a      	mov	r2, r1
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	663b      	str	r3, [r7, #96]	; 0x60
 8003810:	667a      	str	r2, [r7, #100]	; 0x64
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800381e:	4649      	mov	r1, r9
 8003820:	008b      	lsls	r3, r1, #2
 8003822:	4641      	mov	r1, r8
 8003824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003828:	4641      	mov	r1, r8
 800382a:	008a      	lsls	r2, r1, #2
 800382c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003830:	f7fc fcd2 	bl	80001d8 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <UART_SetConfig+0x4e4>)
 800383a:	fba3 1302 	umull	r1, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2164      	movs	r1, #100	; 0x64
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3332      	adds	r3, #50	; 0x32
 800384c:	4a08      	ldr	r2, [pc, #32]	; (8003870 <UART_SetConfig+0x4e4>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4422      	add	r2, r4
 8003860:	609a      	str	r2, [r3, #8]
}
 8003862:	bf00      	nop
 8003864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4d0d      	ldr	r5, [pc, #52]	; (80038ac <__libc_init_array+0x38>)
 8003878:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	2600      	movs	r6, #0
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	4d0b      	ldr	r5, [pc, #44]	; (80038b4 <__libc_init_array+0x40>)
 8003886:	4c0c      	ldr	r4, [pc, #48]	; (80038b8 <__libc_init_array+0x44>)
 8003888:	f000 f820 	bl	80038cc <_init>
 800388c:	1b64      	subs	r4, r4, r5
 800388e:	10a4      	asrs	r4, r4, #2
 8003890:	2600      	movs	r6, #0
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	08003904 	.word	0x08003904
 80038b0:	08003904 	.word	0x08003904
 80038b4:	08003904 	.word	0x08003904
 80038b8:	08003908 	.word	0x08003908

080038bc <memset>:
 80038bc:	4402      	add	r2, r0
 80038be:	4603      	mov	r3, r0
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d100      	bne.n	80038c6 <memset+0xa>
 80038c4:	4770      	bx	lr
 80038c6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ca:	e7f9      	b.n	80038c0 <memset+0x4>

080038cc <_init>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr

080038d8 <_fini>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	bf00      	nop
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr
